import tkinter as tk
from tkinter import messagebox
import subprocess
import os
import sys

# Function to check if a tool is installed
def is_tool_installed(tool_name):
    try:
        subprocess.run([tool_name, "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return True
    except subprocess.CalledProcessError:
        return False
    except FileNotFoundError:
        return False

# Function to install tools on Linux/Mac
def install_tool_unix(tool_name):
    try:
        if tool_name == 'nmap':
            subprocess.run(['sudo', 'apt-get', 'install', '-y', 'nmap'], check=True)  # For Linux (apt-based distros)
        elif tool_name == 'sqlmap':
            subprocess.run(['sudo', 'apt-get', 'install', '-y', 'sqlmap'], check=True)
    except subprocess.CalledProcessError as e:
        messagebox.showerror("Installation Error", f"Failed to install {tool_name}: {str(e)}")

# Function to install tools on macOS
def install_tool_mac(tool_name):
    try:
        if tool_name == 'nmap':
            subprocess.run(['brew', 'install', 'nmap'], check=True)
        elif tool_name == 'sqlmap':
            subprocess.run(['brew', 'install', 'sqlmap'], check=True)
    except subprocess.CalledProcessError as e:
        messagebox.showerror("Installation Error", f"Failed to install {tool_name}: {str(e)}")

# Function to install tools on Windows
def install_tool_windows(tool_name):
    try:
        if tool_name == 'nmap':
            subprocess.run(['choco', 'install', 'nmap', '-y'], check=True)
        elif tool_name == 'sqlmap':
            subprocess.run(['choco', 'install', 'sqlmap', '-y'], check=True)
    except subprocess.CalledProcessError as e:
        messagebox.showerror("Installation Error", f"Failed to install {tool_name}: {str(e)}")

# Wrapper to install tools based on OS
def install_tool(tool_name):
    if os.name == 'posix':  # Unix-based (Linux or macOS)
        if sys.platform == 'darwin':  # macOS
            install_tool_mac(tool_name)
        else:  # Linux
            install_tool_unix(tool_name)
    elif os.name == 'nt':  # Windows
        install_tool_windows(tool_name)

# Function to perform pentesting (starting with Nmap for now)
def perform_pentesting():
    website = url_entry.get()
    if not website:
        messagebox.showwarning("Input Error", "Please enter a website URL")
        return

    # Check if Nmap is installed
    if not is_tool_installed('nmap'):
        messagebox.showinfo("Tool Missing", "Nmap is not installed. Installing Nmap...")
        install_tool('nmap')

    # Once tools are installed, perform pentesting
    try:
        result = subprocess.run(['nmap', '-sV', website], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        output_text.delete("1.0", tk.END)  # Clear previous output
        output_text.insert(tk.END, result.stdout)  # Show Nmap results
    except subprocess.CalledProcessError as e:
        messagebox.showerror("Pentesting Error", f"An error occurred while running Nmap: {str(e)}")

# Create the main window
root = tk.Tk()
root.title("Akama Pentesting Software")
root.geometry("600x400")

# Create label and entry for website URL
url_label = tk.Label(root, text="Enter Website URL:")
url_label.pack(pady=10)

url_entry = tk.Entry(root, width=50)
url_entry.pack(pady=10)

# Create button to trigger pentesting
pentest_button = tk.Button(root, text="Start Pentesting", command=perform_pentesting)
pentest_button.pack(pady=20)

# Output text box to display pentesting results
output_text = tk.Text(root, height=10, width=70)
output_text.pack(pady=10)

# Run the GUI
root.mainloop()
